classdef AutoTrackSettingsController < handle
  
  properties
    catalyticController  % the parent CatalyticController
    
    % GUI handles
    fig  % the settings figure
    mainAxes  % the main axes, which shows the current frame ROI and foreground/background segmentation
    foregroundSignPopup
    fixbgpanel
    text4
    bgColorAxes
    bgColorImageGH
    eyedropperRadiobutton
    fillbutton
    trackingROIHalfWidthText
    trackingROIHalfWidthPlusButton
    trackingROIHalfWidthMinusButton
    thresholdText
    thresholdPlusButton
    thresholdMinusButton
    debugbutton
    doneButton
    cancelButton
    
    choosepatch  % true iff the user is currently in the process of drawing a rectangle in mainAxes
    % buttondownfcn
    %currentFrameROI  % the image, limited to the ROI, for the current frame
%     nr  % number of rows in the ROI
%     nc  % number of cols in the ROI
    r0  % the lowest-index row of the ROI in the full frame
    r1  % the highest-index row of the ROI in the full frame
    c0  % the lowest-index col of the ROI in the full frame
    c1  % the highest-index col of the ROI in the full frame
    roiImageGH  % the image HG object, showing the ROI, with background blacked out (or whited out, depending)
    %perimeterLine  % the line showing the boundary between foreground and background
    fillRegionBoundLine  % the line showing the current fill region
    fillRegionAnchorCorner  % the corner of the fill region that is fixed during the drag
    fillRegionPointerCorner  % the corner of the fill region under the pointer during the drag
    
    backgroundImage
    backgroundThreshold
    foregroundSign
    trackingROIHalfWidth
    backgroundColor
    iFlies
    iFrame
    trx
    currentFrame
    nRows  % number of rows in the full frame (not the tracking ROI)
    nCols  % number of cols in the full frame (not the tracking ROI)
  end  % properties
  
  methods
    % ---------------------------------------------------------------------
    function self=AutoTrackSettingsController(catalyticController)
      self.layout();
      self.catalyticController = catalyticController;
      self.backgroundImage=self.catalyticController.getBackgroundImage();
      self.backgroundThreshold=self.catalyticController.getBackgroundThreshold();
      self.foregroundSign=self.catalyticController.getForegroundSign();
      self.trackingROIHalfWidth=self.catalyticController.getMaximumJump();
      self.backgroundColor=128;  
        % would be nice to change this back to the median of the current frame ROI
      self.iFlies = self.catalyticController.getAutoTrackFly();
      self.iFrame = self.catalyticController.getAutoTrackFrame();
      self.trx=self.catalyticController.getTrx();
      self.currentFrame=self.catalyticController.getCurrentFrame();
      self.nRows=self.catalyticController.getNRows();
      self.nCols=self.catalyticController.getNCols();
      
      % set defaults
      set(self.eyedropperRadiobutton,'value',0);
      %axes(self.bgColorAxes);
      %self.catalyticController.initializeBackgroundImageForCurrentAutoTrack();
      set(self.thresholdText,'string',sprintf('Threshold: %.1f',self.backgroundThreshold()));
      if self.foregroundSign == 1,
        set(self.foregroundSignPopup,'value',1);
      elseif self.foregroundSign == -1,
        set(self.foregroundSignPopup,'value',2);
      else
        set(self.foregroundSignPopup,'value',3);
      end
      set(self.trackingROIHalfWidthText,'string',sprintf('ROI Half-Width: %.1f px',self.trackingROIHalfWidth));
      
      self.choosepatch = false;
      % self.buttondownfcn = get(self.mainAxes,'buttondownfcn');
      
      self.syncROIBounds();
      self.updateSegmentationView();
      
      %if isempty(self.backgroundColor) || isnan(self.backgroundColor) ,
      %  self.catalyticController.setBackgroundColor(median(self.currentFrameROI(:)));
      %end
      %axes(self.bgColorAxes);
      self.bgColorImageGH= ...
        image('parent',self.bgColorAxes, ...
              'cdata',repmat(uint8(self.backgroundColor),[1,1,3]));
      set(self.bgColorAxes,'xlim',[0.5 1.5],'ylim',[0.5 1.5]);    
      %axis off;      
      set(self.fig,'visible','on');
    end
    
    
%     % ---------------------------------------------------------------------
%     function syncROIAndUpdateSegmentationView(self)
%       % [self.r0,self.r1,self.c0,self.c1] = ...
%       %   computeTrackingROI(self.trx,self.iFlies,self.iFrame,self.nRows,self.nCols,self.trackingROIHalfWidth);
%       % self.currentFrameROI = double(self.currentFrame(self.r0:self.r1,self.c0:self.c1));
%       self.syncROI();
%       self.updateSegmentationView();
%     end
%     
%       
    % ---------------------------------------------------------------------      
    function updateSegmentationView(self)
      currentFrameROI=self.currentFrame(self.r0:self.r1,self.c0:self.c1); 
      backgroundImageROI=self.backgroundImage(self.r0:self.r1,self.c0:self.c1);
      isfore= ...
        foregroundSegmentation(currentFrameROI, ...
                               backgroundImageROI, ...
                               self.foregroundSign, ...
                               self.backgroundThreshold);

      if ~isempty(self.roiImageGH) && ishandle(self.roiImageGH)
        delete(self.roiImageGH);
      end
      imColorized=colorizeSegmentation(currentFrameROI,isfore);
      self.roiImageGH = image('parent',self.mainAxes, ...
                              'hittest','on',...
                              'xdata',[self.c0 self.c1], ...
                              'ydata',[self.r0 self.r1], ...
                              'cdata',imColorized);
      set(self.roiImageGH,'buttondownfcn',@(hObject,eventdata)self.mouseButtonDownInMainAxes(hObject,eventdata));
      set(self.mainAxes,'xlim',[self.c0-0.5 self.c1+0.5], ...
                        'ylim',[self.r0-0.5 self.r1+0.5]);
%       bw = bwperim(isfore);
%       [r,c] = find(bw);
%       self.perimeterLine=line('parent',self.mainAxes, ...
%                               'xdata',c+self.c0-1, ...
%                               'ydata',r+self.r0-1, ...
%                               'color','r', ...
%                               'marker','.', ...
%                               'linestyle','none', ...
%                               'hittest','off');
    end  % method
    
    
    % ---------------------------------------------------------------------
    function thresholdPlusButtonTwiddled(self, hObject, eventdata)  %#ok
      % hObject    handle to thresholdPlusButton (see GCBO)
      % eventdata  reserved - to be defined in a future version of MATLAB
      % self    structure with self and user data (see GUIDATA)
      
      %self.catalyticController.incrementBackgroundThreshold(1);
      self.backgroundThreshold=self.backgroundThreshold+1;
      self.syncROIBounds();
      set(self.thresholdText,'string',sprintf('Threshold: %.1f',self.backgroundThreshold));
      self.updateSegmentationView();
      % guidata(hObject,self);
    end
    
    
    % ---------------------------------------------------------------------
    function thresholdMinusButtonTwiddled(self, hObject, eventdata)  %#ok
      % hObject    handle to thresholdMinusButton (see GCBO)
      % eventdata  reserved - to be defined in a future version of MATLAB
      % self    structure with self and user data (see GUIDATA)
      
      % self.catalyticController.incrementBackgroundThreshold(-1);
      self.backgroundThreshold=self.backgroundThreshold-1;
      self.syncROIBounds();
      %self.catalyticController.bgthresh = self.catalyticController.bgthresh - .1;
      set(self.thresholdText,'string',sprintf('Threshold: %.1f',self.backgroundThreshold));
      self.updateSegmentationView();
      % guidata(hObject,self);
    end
        
    
    % ---------------------------------------------------------------------
    function foregroundSignPopupTwiddled(self, source, event)  %#ok
      % hObject    handle to foregroundSignPopup (see GCBO)
      % eventdata  reserved - to be defined in a future version of MATLAB
      % self    structure with self and user data (see GUIDATA)
      
      % Hints: contents = get(hObject,'String') returns foregroundSignPopup contents as cell array
      %        contents{get(hObject,'Value')} returns selected item from foregroundSignPopup
      
      iSelection = get(self.foregroundSignPopup,'value');
      if iSelection == 1
        self.foregroundSign=1;
      elseif iSelection == 2
        self.foregroundSign=-1;
      else
        self.foregroundSign=0;
      end
      self.syncROIBounds();
      self.updateSegmentationView();
    end
   
    
    
    % ---------------------------------------------------------------------
    function doneButtonTwiddled(self, hObject, eventdata)  %#ok
      self.catalyticController.setBackgroundImageForCurrentAutoTrack(self.backgroundImage);
      self.catalyticController.setBackgroundThreshold(self.backgroundThreshold);
      self.catalyticController.setMaximumJump(self.trackingROIHalfWidth);      
      self.catalyticController.setForegroundSign(self.foregroundSign);      
      delete(self.fig);
    end
    
    
    
    % ---------------------------------------------------------------------
    function cancelButtonTwiddled(self, hObject, eventdata)  %#ok
      delete(self.fig);
    end
    
    
    
    % ---------------------------------------------------------------------
    function eyedropperRadiobuttonTwiddled(self, hObject, eventdata)  %#ok
      % Hint: get(hObject,'Value') returns toggle state of eyedropperRadiobutton
    end
    
    
    
    % ---------------------------------------------------------------------
    function mouseButtonDownInMainAxes(self, hObject, eventdata)  %#ok
      %fprintf('Entered mouseButtonDownInMainAxes()\n');
      pt = get(self.mainAxes,'currentpoint');
      %[nr,nc]=size(self.currentFrame);
      r=pt(1,:);  % the <x,y> vector
      x = min(max(1,round(r(1))),self.nCols);
      y = min(max(1,round(r(2))),self.nRows);
      
      if get(self.eyedropperRadiobutton,'Value')        
        self.backgroundColor=self.currentFrame(y,x);
        set(self.bgColorImageGH, ...
            'cdata',repmat(uint8(self.backgroundColor),[1,1,3]));
      else
        if ~isempty(self.fillRegionBoundLine) && ishandle(self.fillRegionBoundLine)
          delete(self.fillRegionBoundLine);
        end
        self.fillRegionAnchorCorner = [x,y];
        self.fillRegionPointerCorner=self.fillRegionAnchorCorner;
        self.fillRegionBoundLine = ...
          line('parent',self.mainAxes, ...
               'xdata',[x,x,x,x,x], ...
               'ydata',[y,y,y,y,y], ...
               'zdata',[1 1 1 1 1], ...
               'color','g');
        self.choosepatch = true;
      end
    end
    
    
    % ---------------------------------------------------------------------
    function debugbuttonTwiddled(self, hObject, eventdata)  %#ok
      keyboard;
    end
    
    
    % ---------------------------------------------------------------------
    function fillbuttonTwiddled(self, hObject, eventdata)  %#ok
      if isempty(self.fillRegionAnchorCorner) || isempty(self.fillRegionPointerCorner)
        msgbox('Drag a rectangle to select a patch to fill');
        return;
      end
      
      r0 = min(self.fillRegionAnchorCorner(2),self.fillRegionPointerCorner(2));
      r1 = max(self.fillRegionAnchorCorner(2),self.fillRegionPointerCorner(2));
      c0 = min(self.fillRegionAnchorCorner(1),self.fillRegionPointerCorner(1));
      c1 = max(self.fillRegionAnchorCorner(1),self.fillRegionPointerCorner(1));
      r0 = max(round(r0),1);
      r1 = min(round(r1),self.catalyticController.getNRows());
      c0 = max(round(c0),1);
      c1 = min(round(c1),self.catalyticController.getNCols());
      bgcurr=self.backgroundImage;
      bgcurr(r0:r1,c0:c1) = self.backgroundColor;
      self.backgroundImage=bgcurr;
      
      self.syncROIBounds();
      self.updateSegmentationView();
      % guidata(hObject,self);
    end
    
    
    
    % ---------------------------------------------------------------------
    function mouseMoved(self,hObject,eventdata)  %#ok
      %if isfield(self,'choosepatch') || ~self.choosepatch
      %fprintf('Entered mouseMoved()\n');
      if isempty(self.choosepatch) || ~self.choosepatch
        return
      end
      %fprintf('Entered mouseMoved() inner sanctum\n');
      
      pt = get(self.mainAxes,'currentpoint');
      x = pt(1,1);
      y = pt(1,2);
      %[nr,nc]=size(self.currentFrameROI);
      %if x < self.c0-0.5 || x > self.c1+0.5 || y < self.r0-0.5 || y > self.r1+0.5
        %fprintf('returning early!\n');
      %  return
      %end
      x = min(max(self.c0,round(x)),self.c1);
      y = min(max(self.r0,round(y)),self.r1);
      
      self.fillRegionPointerCorner = [x,y];
      set(self.fillRegionBoundLine,...
          'xdata',[self.fillRegionAnchorCorner(1),self.fillRegionAnchorCorner(1),x,x,self.fillRegionAnchorCorner(1)],...
          'ydata',[self.fillRegionAnchorCorner(2),y,y,self.fillRegionAnchorCorner(2),self.fillRegionAnchorCorner(2)]);
      
      % guidata(hObject,self);
    end
    
    
    % ---------------------------------------------------------------------
    function mouseButtonReleased(self,hObject,eventdata)  %#ok
      self.choosepatch = false;
      % If the rectangle is of zero area, delete it
      if all(self.fillRegionAnchorCorner==self.fillRegionPointerCorner)
        delete(self.fillRegionBoundLine);
        self.fillRegionBoundLine=[];
        self.fillRegionAnchorCorner=[];
        self.fillRegionPointerCorner=[];
      end
      set(self.fillbutton,'enable',onIff(~isempty(self.fillRegionAnchorCorner)));
    end
    
    
    
    % ---------------------------------------------------------------------
    function trackingROIHalfWidthPlusButtonTwiddled(self, hObject, eventdata)  %#ok
      %self.catalyticController.incrementMaximumJump(+1);
      self.trackingROIHalfWidth=self.trackingROIHalfWidth+1;
      set(self.trackingROIHalfWidthText,'string',sprintf('ROI Half-Width: %.1f px',self.trackingROIHalfWidth));
      self.syncROIBounds();
      self.updateSegmentationView();
    end
    
    
    
    % ---------------------------------------------------------------------
    function trackingROIHalfWidthMinusButtonTwiddled(self, hObject, eventdata)  %#ok
      %self.catalyticController.incrementMaximumJump(-1);
      self.trackingROIHalfWidth=self.trackingROIHalfWidth-1;
      set(self.trackingROIHalfWidthText,'string',sprintf('ROI Half-Width: %.1f px',self.trackingROIHalfWidth));
      self.syncROIBounds();
      self.updateSegmentationView();
    end
    
    
    
    % ---------------------------------------------------------------------
    function closeRequested(self)  %#ok
      % do nothing: user must click done or cancel
      %delete(self.fig);
    end
    
    
    
    % ---------------------------------------------------------------------
    function layout(self)      
      self.fig = figure(...
        'Units','characters',...
        'CloseRequestFcn',@(hObject,eventdata)self.closeRequested(),...
        'Color',[0.929411764705882 0.929411764705882 0.929411764705882],...
        'Colormap',gray(256),...
        'IntegerHandle','off',...
        'InvertHardcopy',get(0,'defaultfigureInvertHardcopy'),...
        'MenuBar','none',...
        'Name','Auto-track Settings...',...
        'NumberTitle','off',...
        'PaperPosition',get(0,'defaultfigurePaperPosition'),...
        'Position',[103.666666666667 30.8333333333333 111.5 30.75],...
        'Resize','off',...
        'ToolBar','figure',...
        'WindowButtonMotionFcn',@(hObject,eventdata)self.mouseMoved(hObject,eventdata),...
        'WindowButtonUpFcn',@(hObject,eventdata)self.mouseButtonReleased(hObject,eventdata),...
        'HandleVisibility','callback',...
        'WindowStyle','normal', ...
        'UserData',[],...
        'Tag','fig',...
        'Visible','on');
      
      self.mainAxes = axes(...
        'Parent',self.fig,...
        'Units','characters',...
        'FontUnits','pixels',...
        'Position',[2.5 1.58333333333333 64.5 28.25],...
        'FontSize',12.5,...
        'LooseInset',[14.56 3.55666666666667 10.64 2.425],...
        'ButtonDownFcn',@(hObject,eventdata)@(hObject,eventdata)self.mouseButtonDownInMainAxes(hObject,eventdata),...
        'clim',[0 255], ...
        'hittest','on',...
        'ydir','reverse', ...
        'dataaspectratio',[1 1 1], ...
        'Tag','mainAxes');
%         'CameraPosition',[0.5 0.5 9.16025403784439],...
%         'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
%         'XColor',get(0,'defaultaxesXColor'),...
%         'YColor',get(0,'defaultaxesYColor'),...
%         'ZColor',get(0,'defaultaxesZColor'),...
%         'Color',get(0,'defaultaxesColor'),...
%         'ColorOrder',get(0,'defaultaxesColorOrder'),...
      
      self.foregroundSignPopup = uicontrol(...
        'Parent',self.fig,...
        'Units','characters',...
        'FontUnits','pixels',...
        'Callback',@(hObject,eventdata)self.foregroundSignPopupTwiddled(hObject,eventdata),...
        'FontSize',12.5,...
        'Position',[71.1666666666667 8.23076923076925 36.3333333333333 2.15384615384615],...
        'String',{  'Light flies on dark background'; 'Dark flies on light background'; 'Other' },...
        'Style','popupmenu',...
        'Value',1,...
        'Tag','foregroundSignPopup');
      
      self.fixbgpanel = uipanel(...
        'Parent',self.fig,...
        'Units','characters',...
        'FontUnits','pixels',...
        'FontSize',12.5,...
        'Title','Fix Background',...
        'Tag','fixbgpanel',...
        'UserData',[],...
        'Clipping','on',...
        'Position',[67.6666666666667 16.3846153846154 41.1666666666667 12.9230769230769]);
      
      self.text4 = uicontrol(...
        'Parent',self.fixbgpanel,...
        'Units','characters',...
        'FontUnits','pixels',...
        'CData',[],...
        'FontSize',12.5,...
        'HorizontalAlignment','left',...
        'Position',[1.66666666666667 3.38461538461539 28.6666666666667 7.92307692307692],...
        'String',{  '1) To select a patch to fill, drag a rectangle.'; '2) To change the patch color, select using the eyedropper. '; '3) Click Fill.' },...
        'Style','text',...
        'UserData',[],...
        'Tag','text4');
      
      self.bgColorAxes = axes(...
        'Parent',self.fixbgpanel,...
        'Units','characters',...
        'FontUnits','pixels',...
        'Position',[31 5.30769230769231 8.66666666666667 4.23076923076923],...
        'FontSize',12.5,...
        'clim',[0 255], ...
        'ydir','reverse', ...
        'Box','on', ...
        'Layer','top', ...
        'xtick',[], ...
        'ytick',[], ...
        'Tag','bgColorAxes');
%         'DataAspectRatio',[1 1 1], ...
            
      self.eyedropperRadiobutton = uicontrol(...
        'Parent',self.fixbgpanel,...
        'Units','characters',...
        'FontUnits','pixels',...
        'Callback',@(hObject,eventdata)self.eyedropperRadiobuttonTwiddled(hObject,eventdata),...
        'FontSize',12.5,...
        'Position',[21.3333333333333 1.30769230769231 19 1.2],...
        'String','Eyedropper',...
        'Style','radiobutton',...
        'Tag','eyedropperRadiobutton');
      
      self.fillbutton = uicontrol(...
        'Parent',self.fixbgpanel,...
        'Units','characters',...
        'FontUnits','pixels',...
        'Callback',@(hObject,eventdata)self.fillbuttonTwiddled(hObject,eventdata),...
        'FontSize',12.5,...
        'Position',[7 0.615384615384615 6.33333333333333 2.07692307692308],...
        'String','Fill',...
        'Enable','off',...
        'Tag','fillbutton');
      
      self.trackingROIHalfWidthText = uicontrol(...
        'Parent',self.fig,...
        'Units','characters',...
        'FontUnits','pixels',...
        'FontSize',12.5,...
        'HorizontalAlignment','left',...
        'Position',[68 14.45 32 1.1],...
        'String','ROI Half-Width:',...
        'Style','text',...
        'Tag','trackingROIHalfWidthText');
      
      self.trackingROIHalfWidthPlusButton = uicontrol(...
        'Parent',self.fig,...
        'Units','characters',...
        'FontUnits','pixels',...
        'Callback',@(hObject,eventdata)self.trackingROIHalfWidthPlusButtonTwiddled(hObject,eventdata),...
        'FontSize',12.5,...
        'Position',[100 13.9 3.5 1.9],...
        'String','+',...
        'Tag','trackingROIHalfWidthPlusButton');
      
      self.trackingROIHalfWidthMinusButton = uicontrol(...
        'Parent',self.fig,...
        'Units','characters',...
        'FontUnits','pixels',...
        'Callback',@(hObject,eventdata)self.trackingROIHalfWidthMinusButtonTwiddled(hObject,eventdata),...
        'FontSize',12.5,...
        'Position',[100+4.3 13.9 3.5 1.9],...
        'String','-',...
        'Tag','trackingROIHalfWidthMinusButton');
      
      self.thresholdText = uicontrol(...
        'Parent',self.fig,...
        'Units','characters',...
        'FontUnits','pixels',...
        'FontSize',12.5,...
        'HorizontalAlignment','left',...
        'Position',[68 11.85 25 1.1],...
        'String','Threshold: ',...
        'Style','text',...
        'Tag','thresholdText');
      
      self.thresholdPlusButton = uicontrol(...
        'Parent',self.fig,...
        'Units','characters',...
        'FontUnits','pixels',...
        'Callback',@(hObject,eventdata)self.thresholdPlusButtonTwiddled(hObject,eventdata),...
        'FontSize',12.5,...
        'Position',[100 11.3 3.5 1.9],...
        'String','+',...
        'Tag','thresholdPlusButton');
      
      self.thresholdMinusButton = uicontrol(...
        'Parent',self.fig,...
        'Units','characters',...
        'FontUnits','pixels',...
        'Callback',@(hObject,eventdata)self.thresholdMinusButtonTwiddled(hObject,eventdata),...
        'FontSize',12.5,...
        'Position',[100+4.3 11.3 3.5 1.9],...
        'String','-',...
        'Tag','thresholdMinusButton');      
      
      self.debugbutton = uicontrol(...
        'Parent',self.fig,...
        'Units','characters',...
        'FontUnits','pixels',...
        'Callback',@(hObject,eventdata)self.debugbuttonTwiddled(hObject,eventdata),...
        'FontSize',12.5,...
        'Position',[83.1666666666667 4.30769230769231 15.5 2.23076923076923],...
        'String','Debug',...
        'visible','off', ...
        'Tag','debugbutton');      

      fixbgpanelPosition=get(self.fixbgpanel,'position');
      fixbgpanelXOffset=fixbgpanelPosition(1);
      fixbgpanelWidth=fixbgpanelPosition(3);
      %fixbgpanelCenterX=fixbgpanelXOffset+fixbgpanelWidth/2;
      doneCancelInterButtonWidth=4;  % chars
      doneCancelButtonWidth=15;
      doneCancelButtonHeight=2;
      doneCancelButtonYOffset=2;
      doneCancelButtonBBBoxWidth=2*doneCancelButtonWidth+doneCancelInterButtonWidth;
      doneButtonXOffset=fixbgpanelXOffset+(fixbgpanelWidth-doneCancelButtonBBBoxWidth)/2;
      cancelButtonXOffset=doneButtonXOffset+doneCancelButtonWidth+doneCancelInterButtonWidth;
      
      self.doneButton = uicontrol(...
        'Parent',self.fig,...
        'Units','characters',...
        'FontUnits','pixels',...
        'Callback',@(hObject,eventdata)self.doneButtonTwiddled(hObject,eventdata),...
        'FontSize',12.5,...
        'Position',[doneButtonXOffset doneCancelButtonYOffset doneCancelButtonWidth doneCancelButtonHeight],...
        'String','Done',...
        'Tag','doneButton');
      
      self.cancelButton = uicontrol(...
        'Parent',self.fig,...
        'Units','characters',...
        'FontUnits','pixels',...
        'Callback',@(hObject,eventdata)self.cancelButtonTwiddled(hObject,eventdata),...
        'FontSize',12.5,...
        'Position',[cancelButtonXOffset doneCancelButtonYOffset doneCancelButtonWidth doneCancelButtonHeight],...
        'String','Cancel',...
        'Tag','cancelButton');
    end  % method
    
  end  % methods
    
  % -----------------------------------------------------------------------
  methods (Access=private)
    % --------------------------------------------------------------------
    function syncROIBounds(self)
      [self.r0,self.r1,self.c0,self.c1] = ...
        computeTrackingROI(self.trx, ...
                           self.iFlies, ...
                           self.iFrame, ...
                           self.nRows, ...
                           self.nCols, ...
                           self.trackingROIHalfWidth);
    end   
  end  % private methods
  
end  % classdef
