function acstrJobOutputFileNames = ...
  fnSubmitMovieToProcessingAlt(strMovieFileName, ...
                               strJobsFolderName, ...
                               strOutputFolderName,...
                               strIdentitiesFileName, ...
                               strAppRootFolderName, ...
                               strClipBackgroundFN, ...
                               strClipFloorFN, ...
                               strGTEllipsesFN, ...
                               strTunedSegmentationParamsFN, ...
                               bRunLocal)

% This function submits clip segments for processing, in a way more
% suitable to batch processing than fnSubmitMovieToProcessing().  iNumJobs
% returns the number of jobs _submitted_, in either case.
%
% strAppRootFolder is the folder with subdirectories such as Applications, 
% Config, Deploy, Modules, etc.  I.e. the root folder that contains all the
% source code.

% Copyright (c) 2008 Shay Ohayon, California Institute of Technology. This
% file is a part of a free software. you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by the
% Free Software Foundation (see GPL.txt)

% Make sure the jobs folder & output folder exist.
if ~exist(strOutputFolderName,'dir')
  mkdir(strOutputFolderName)
end;
if ~exist(strJobsFolderName,'dir')
  mkdir(strJobsFolderName)
end;

% Load the background, floor mask, GT ellipses, and 
% segmentation parameters, and store them all in a single variable, 
% strctBackground.
%strctBackground=fnLoadBGFloorSegParamsFile(strDetectionFileName);
a2fBackground=fnLoadAnonymous(strClipBackgroundFN);
a2bFloor=fnLoadAnonymous(strClipFloorFN);
[a2strctTuningGTEllipses,iTuningGTFrames]= ...
  fnLoadSegmentationGT(strGTEllipsesFN);
strctSegParams=fnLoadAnonymous(strTunedSegmentationParamsFN);
strctBackground= ...
  fnStrctBackgroundFromParts(a2fBackground, ...
                             a2bFloor, ...
                             a2strctTuningGTEllipses, ...
                             iTuningGTFrames, ...
                             strctSegParams);

% Load the classifiers file.
strctID = load(strIdentitiesFileName);

% Determine iNumMice
iNumMice = length(strctID.strctIdentityClassifier.m_astrctClassifiers);

% Get the clip metadata
strctMovieInfo = fnReadVideoInfo(strMovieFileName);

% Unpack the index of the first and last frames of the clip.
iStartFrame = 1;
iEndFrame = strctMovieInfo.m_iNumFrames;

% Make the "setup" file, which contains a bunch of information, like the
% classifiers, background, floor mask, and segmentation parameters.  Most
% of that information is also packaged up and returned in 
% strctAdditionalInfo.
[strctAdditionalInfo, strAdditionalInfoFileName] = ...
  fnCreateSetupFile(strctID,strctBackground,strJobsFolderName);

% Determine what the intervals with be for the clip, and which frame within
% each interval will be the key frame.
%iMinInterval=5000;
iMinInterval=50;
iSkip=5000;
iNumReinitializations=5;
iMaxJobSize=5000;
iNumFramesMissing=10;
handles=[];
astrctReliableFrames = ...
  fnFindReliable(strctMovieInfo,...
                 strctAdditionalInfo,...
                 iNumMice,...
                 iStartFrame,...
                 iEndFrame,...
                 iMinInterval,...
                 iSkip,...
                 iNumReinitializations,...
                 iMaxJobSize,...
                 iNumFramesMissing,...
                 handles);
if isempty(astrctReliableFrames)
  error('Unable to find a single interval with a reliable key frame.');
end

% Make the jobargin .mat files
[acstrJobOutputFileNames,acstrJobInputFileNames]= ...
  fnCreateJobs(strMovieFileName,...
               astrctReliableFrames,...
               strAdditionalInfoFileName, ...
               strOutputFolderName, ...
               strJobsFolderName);

% Run the individual jobs, either locally or on the cluster.
% This will block if running local, but will return more-or-less
% immediately if running on the cluster.
fnRunJobsAsNeeded(acstrJobOutputFileNames, ...
                  acstrJobInputFileNames, ...
                  bRunLocal, ...
                  strAppRootFolderName);
                
end


