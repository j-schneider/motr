function compileMexFunctions()
% % Compile MEX files, and build cluster executable on Linux

% figure out where the root of the Ohayon code is
thisScriptFileName=mfilename('fullpath');
thisScriptDirName=fileparts(thisScriptFileName);
thisScriptDirParts=split_on_filesep(thisScriptDirName);
  % a cell array with each dir an element
mouseStuffRootParts=thisScriptDirParts(1:end-2);
g_strMouseStuffRootDirName=combine_with_filesep(mouseStuffRootParts);

% make the dir to store binaries, if it doesn't exist
archStr=computer('arch');                
%dllDirName=fullfile(g_strMouseStuffRootDirName,'Modules','MEX','linux64');
dllDirName=fullfile(g_strMouseStuffRootDirName,'Modules','MEX',archStr);
if ~exist(dllDirName,'dir')
    mkdir(dllDirName,'dir');
end;

% % build the (smaller) mex DLLs
% mex -v ./Modules/MEX_Code/LabelsHist/LabelsHist.cpp -output ./Modules/MEX/linux64/fnLabelsHist.mexa64
% mex -v ./Modules/MEX_Code/SelectLabels/SelectLabels.cpp -output ./Modules/MEX/linux64/fnSelectLabels.mexa64
% mex -v ./Modules/MEX_Code/EM/fnEM.cpp -output ./Modules/MEX/linux64/fnEM.mexa64
% mex -v ./Modules/MEX_Code/HOGFeatures/HOGfeatures.cpp -output ./Modules/MEX/linux64/fnHOGfeatures.mexa64
% mex -v ./Modules/MEX_Code/Viterbi/Viterbi.cpp -output ./Modules/MEX/linux64/fndllViterbi.mexa64
% mex -v ./Modules/MEX_Code/ViterbiOnTheFly/ViterbiOnTheFly.cpp -output ./Modules/MEX/linux64/fndllViterbiOnTheFly.mexa64
% mex -v ./Modules/MEX_Code/ViterbiLikelihood1AA/ViterbiLikelihood1AA.cpp -output ./Modules/MEX/linux64/fnViterbiLikelihood1AA.mexa64
% mex -v ./Modules/MEX_Code/ViterbiLikelihoodForHeadTail/ViterbiLikelihoodForHeadTail.cpp -output ./Modules/MEX/linux64/fnViterbiLikelihoodForHeadTail.mexa64
% mex -v ./Modules/MEX_Code/Interp2/FastInterp2.cpp -output ./Modules/MEX/linux64/fnFastInterp2.mexa64
% mex -v ./Modules/MEX_Code/XML/xml_findstr.c -output ./Modules/MEX/linux64/xml_findstr.mexa64

% list of all the .cpp files to be compiled
cppFN={'CovInd.cpp' ...
       'DetectBehavior.cpp' ...
       'IntervalHist.cpp' ...
       'MultInd.cpp' ...
       'FastFlux.cpp' ...
       'LabelsHist.cpp' ...
       'SelectLabels.cpp' ...
       'fnEM.cpp' ...
       'HOGfeatures.cpp' ...
       'Viterbi.cpp' ...
       'ViterbiOnTheFly.cpp' ...
       'ViterbiLikelihood.cpp' ...
       'ViterbiLikelihood1AA.cpp' ...
       'ViterbiLikelihoodForHeadTail.cpp' ...
       'ViterbiTransition.cpp' ...
       'FastInterp2.cpp' ...
       'xml_findstr.c'}';
%       'Keyscan.cpp' ...
cppDirName={'CovInd' ...
            'DetectBehavior' ...
            'IntervalHist' ...
            'MultInd' ...
            'FastFlux' ...
            'LabelsHist' ...
            'SelectLabels' ...
            'EM' ...
            'HOGFeatures' ...
            'Viterbi' ...
            'ViterbiOnTheFly' ...
            'ViterbiLikelihood' ...
            'ViterbiLikelihood1AA' ...
            'ViterbiLikelihoodForHeadTail' ...
            'ViterbiTransition' ...
            'Interp2' ...
            'XML'}';
%            'Keyscan' ...
dllBaseName={'fndllCovInd' ...
             'fndllDetectBehavior' ...
             'fndllIntervalHist' ...
             'fndllMultInd' ...
             'fnFastFlux2D' ...
             'fnLabelsHist' ...
             'fnSelectLabels' ...
             'fnEM' ...
             'fnHOGfeatures' ...
             'fndllViterbi' ...
             'fndllViterbiOnTheFly' ...
             'fnViterbiLikelihood' ...
             'fnViterbiLikelihood1AA' ...
             'fnViterbiLikelihoodForHeadTail' ...
             'fnViterbiTransition' ...
             'fnFastInterp2' ...
             'xml_findstr'}';
%             'fndllKeyscan' ...
           
% compile all the above C/C++ files           
for i=1:length(cppFN)
  dllFN=[dllBaseName{i} '.' mexext()];
  fprintf('\n\n\n%s:\n',dllFN);
  sourceFNAbs=fullfile(g_strMouseStuffRootDirName,'Modules','MEX_Code', ...
                       cppDirName{i},cppFN{i});
  dllFNAbs=fullfile(g_strMouseStuffRootDirName,'Modules','MEX',archStr, ...
                    dllFN);
  mex('-v',sourceFNAbs,'-output',dllFNAbs);
end

% build fnEllipseBBoxIntersection() mex, which includes some NR code
dllFN=['fnEllipseBBoxIntersection' '.' mexext()];
fprintf('\n\n\n%s:\n',dllFN);
sourceDirName= ...
  fullfile(g_strMouseStuffRootDirName,'Modules','MEX_Code', ...
           'EllipseBBoxIntersection');
dllFNAbs= ...
  fullfile(g_strMouseStuffRootDirName,'Modules','MEX',archStr, ...
           dllFN);
mex('-v', ...
    fullfile(sourceDirName,'EllipseBBoxIntersection.cpp'), ...
    fullfile(sourceDirName,'zrhqr.cpp'), ...
    fullfile(sourceDirName,'balanc.cpp'), ...
    fullfile(sourceDirName,'hqr.cpp'), ...
    fullfile(sourceDirName,'nrutil.cpp'), ...
    '-output',dllFNAbs);

% build fnEllipseEllipseIntersectionMex() mex, which includes some NR code
dllFN=['fnEllipseEllipseIntersectionMex' '.' mexext()];
fprintf('\n\n\n%s:\n',dllFN);
sourceDirName= ...
  fullfile(g_strMouseStuffRootDirName,'Modules','MEX_Code', ...
           'EllipseEllipseIntersection');
dllFNAbs= ...
  fullfile(g_strMouseStuffRootDirName,'Modules','MEX',archStr, ...
           dllFN);
mex('-v', ...
    fullfile(sourceDirName,'EllipseEllipseIntersection.cpp'), ...
    fullfile(sourceDirName,'zrhqr.cpp'), ...
    fullfile(sourceDirName,'balanc.cpp'), ...
    fullfile(sourceDirName,'hqr.cpp'), ...
    fullfile(sourceDirName,'nrutil.cpp'), ...
    '-output',dllFNAbs);

% build parsejpg8() mex, which includes a lot of code from libjpeg
dllFN=['parsejpg8' '.' mexext()];
fprintf('\n\n\n%s:\n',dllFN);
sourceDirName= ...
  fullfile(g_strMouseStuffRootDirName,'Modules','MEX_Code','parsejpg8');
dllFNAbs=fullfile(g_strMouseStuffRootDirName,'Modules','MEX',archStr, ...
                  dllFN);
% have to do this by cd'ing to the source dir, b/c Windows chokes on the
% long command strings if each .c file is named by its absolute path
thisDir=pwd();
cd(sourceDirName);
mex('-v', ...
    'parsejpg8.c', ...
    'jcapimin.c', ...
    'jcapistd.c', ...
    'jctrans.c', ...
    'jcparam.c', ...
    'jdatadst.c', ...
    'jcinit.c', ...
    'jcmaster.c', ...
    'jcmarker.c', ... 
    'jcmainct.c', ... 
    'jcprepct.c', ... 
    'jccoefct.c', ... 
    'jccolor.c', ... 
    'jcsample.c', ... 
    'jchuff.c', ... 
    'jcphuff.c', ... 
    'jcdctmgr.c', ... 
    'jfdctfst.c', ... 
    'jfdctflt.c', ... 
    'jfdctint.c', ... 
    'jdapimin.c', ... 
    'jdapistd.c', ... 
    'jdtrans.c', ... 
    'jdatasrc.c', ... 
    'jdmaster.c', ... 
    'jdinput.c', ... 
    'jdmarker.c', ... 
    'jdhuff.c', ... 
    'jdphuff.c', ... 
    'jdmainct.c', ... 
    'jdcoefct.c', ... 
    'jdpostct.c', ... 
    'jddctmgr.c', ... 
    'jidctfst.c', ... 
    'jidctflt.c', ... 
    'jidctint.c', ... 
    'jidctred.c', ... 
    'jdsample.c', ... 
    'jdcolor.c', ... 
    'jquant1.c', ... 
    'jquant2.c', ... 
    'jdmerge.c', ... 
    'jcomapi.c', ... 
    'jutils.c', ... 
    'jerror.c', ... 
    'jmemmgr.c', ... 
    'jmemnobs.c', ...
    '-output',dllFNAbs);
cd(thisDir);

% make sure those new mex files get picked up  --ALT, 2011/10/20
rehash toolboxcache ;  

end
